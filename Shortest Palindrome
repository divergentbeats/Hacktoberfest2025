#include <bits/stdc++.h>
using namespace std;

string shortestPalindrome(string s) {
    string rev = s;
    reverse(rev.begin(), rev.end());

    string temp = s + "#" + rev;
    vector<int> lps(temp.size(), 0);

    // Build LPS array (same as KMP preprocessing)
    for (int i = 1; i < temp.size(); i++) {
        int j = lps[i - 1];
        while (j > 0 && temp[i] != temp[j])
            j = lps[j - 1];
        if (temp[i] == temp[j])
            j++;
        lps[i] = j;
    }

    int palinLen = lps.back(); // Longest palindromic prefix length
    string add = rev.substr(0, s.size() - palinLen);
    return add + s;
}

int main() {
    string s1 = "aacecaaa";
    string s2 = "abcd";

    cout << "Input: " << s1 << "\nOutput: " << shortestPalindrome(s1) << "\n\n";
    cout << "Input: " << s2 << "\nOutput: " << shortestPalindrome(s2) << "\n";

    return 0;
}
